#!/usr/bin/env python3
import os, re, sys, datetime, pathlib, html
from typing import List, Dict
import markdown, yaml

ROOT = pathlib.Path(".")
PROB_DIR = ROOT / "problems"
PUB = ROOT / "public"
(PUB / "problems").mkdir(parents=True, exist_ok=True)

CSS = """
body { font-family: -apple-system, system-ui, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
       max-width: 820px; margin: 2rem auto; padding: 0 1rem; line-height: 1.55; }
a { color: #0b5fff; text-decoration: none; }
h1,h2,h3 { line-height: 1.25; }
.badge { display:inline-block; padding:2px 8px; border-radius:12px; font-size:12px; background:#eef; margin-left:6px; }
.tags { font-size: 12px; color:#555; }
.footer { margin-top: 2rem; font-size: 12px; color:#666; }
code { background: #f6f8fa; padding: 2px 4px; border-radius: 4px; }
pre { background: #f6f8fa; padding: 8px; border-radius: 6px; overflow:auto; }
hr { border: 0; height: 1px; background: #eee; margin: 2rem 0; }
"""

def parse_frontmatter(txt: str):
    if not txt.startswith('---'):
        return {}, txt
    parts = txt.split('---', 2)
    if len(parts) < 3:
        return {}, txt
    fm = yaml.safe_load(parts[1]) or {}
    body = parts[2].lstrip('\n')
    return fm, body

def to_html(md_text: str) -> str:
    return markdown.markdown(md_text, extensions=['fenced_code', 'tables', 'toc'])

def render_page(title: str, body_html: str) -> str:
    return f"""<!doctype html>
<html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">
<title>{html.escape(title)}</title>
<style>{CSS}</style></head>
<body>
<h1>{html.escape(title)}</h1>
{body_html}
<div class="footer">Generated by build_public.py</div>
</body></html>"""

entries = []
for path in sorted(PROB_DIR.glob("*.md")):
    txt = path.read_text(encoding="utf-8")
    fm, body = parse_frontmatter(txt)
    m = re.search(r'^\s*#\s+(.*)', body, flags=re.M)
    title = m.group(1).strip() if m else path.stem
    date = str(fm.get("date", ""))
    status = str(fm.get("status", "")).strip()
    tags = fm.get("tags", [])
    if isinstance(tags, str): tags = [t.strip() for t in tags.split(",") if t.strip()]
    html_body = to_html(body)
    html_page = render_page(title, html_body)
    out = PUB / "problems" / (path.stem + ".html")
    out.write_text(html_page, encoding="utf-8")
    entries.append({"title": title, "date": date, "status": status, "tags": tags, "href": f"problems/{path.stem}.html"})

def sort_key(e):
    try:
        return (datetime.datetime.strptime(e["date"], "%Y-%m-%d"), e["title"])
    except Exception:
        return (datetime.datetime.min, e["title"])

entries.sort(key=sort_key, reverse=True)

def render_index(entries: List[Dict]) -> str:
    items = []
    for e in entries:
        tag_str = ", ".join(e["tags"]) if e["tags"] else ""
        badge = f'<span class="badge">{html.escape(e["status"])}</span>' if e["status"] else ""
        tags_html = f'<div class="tags">{html.escape(tag_str)}</div>' if tag_str else ""
        items.append(f'<li><a href="{e["href"]}">{html.escape(e["date"])} â€” {html.escape(e["title"])}</a> {badge}{tags_html}</li>')
    content = "<ul>\n" + "\n".join(items) + "\n</ul>"
    intro = "<p>Research problem logs. Newest first. Edit or add entries in <code>problems/</code>.</p>"
    return render_page("Problem Logs", intro + content)

index_html = render_index(entries)
(PUB / "index.html").write_text(index_html, encoding="utf-8")
print("Wrote:", PUB / "index.html")
